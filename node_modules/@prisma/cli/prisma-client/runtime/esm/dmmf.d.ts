import { DMMF } from '@prisma/generator-helper';
import { Dictionary } from './utils/common';
export declare class DMMFClass implements DMMF.Document {
    datamodel: DMMF.Datamodel;
    schema: DMMF.Schema;
    mappings: DMMF.Mappings;
    queryType: DMMF.OutputType;
    mutationType: DMMF.OutputType;
    outputTypes: {
        model: DMMF.OutputType[];
        prisma: DMMF.OutputType[];
    };
    outputTypeMap: Dictionary<DMMF.OutputType>;
    inputObjectTypes: {
        model?: DMMF.InputType[];
        prisma: DMMF.InputType[];
    };
    inputTypeMap: Dictionary<DMMF.InputType>;
    enumMap: Dictionary<DMMF.SchemaEnum>;
    datamodelEnumMap: Dictionary<DMMF.DatamodelEnum>;
    modelMap: Dictionary<DMMF.Model>;
    mappingsMap: Dictionary<DMMF.ModelMapping>;
    rootFieldMap: Dictionary<DMMF.SchemaField>;
    constructor({ datamodel, schema, mappings }: DMMF.Document);
    get [Symbol.toStringTag](): string;
    protected outputTypeToMergedOutputType: (outputType: DMMF.OutputType) => DMMF.OutputType;
    protected resolveOutputTypes(): void;
    protected resolveInputTypes(): void;
    protected resolveFieldArgumentTypes(): void;
    protected getQueryType(): DMMF.OutputType;
    protected getMutationType(): DMMF.OutputType;
    protected getOutputTypes(): {
        model: DMMF.OutputType[];
        prisma: DMMF.OutputType[];
    };
    protected getDatamodelEnumMap(): Dictionary<DMMF.DatamodelEnum>;
    protected getEnumMap(): Dictionary<DMMF.SchemaEnum>;
    protected getModelMap(): Dictionary<DMMF.Model>;
    protected getMergedOutputTypeMap(): Dictionary<DMMF.OutputType>;
    protected getInputTypeMap(): Dictionary<DMMF.InputType>;
    protected getMappingsMap(): Dictionary<DMMF.ModelMapping>;
    protected getRootFieldMap(): Dictionary<DMMF.SchemaField>;
}
